{"version":3,"sources":["Image.js"],"names":["_","React","Image","RNImage","Animated","StyleSheet","View","Platform","BlurView","CacheManager","mounted","state","uri","undefined","intensity","Value","options","get","getPath","path","setState","load","props","prevProps","prevState","preview","transitionDuration","timing","duration","toValue","useNativeDriver","OS","start","style","defaultSource","tint","otherProps","hasDefaultSource","hasPreview","isImageReady","opacity","interpolate","inputRange","outputRange","computedStyle","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","backgroundColor","black","white","Component","defaultProps","AnimatedBlurView","createAnimatedComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n} from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { type ____ImageStyleProp_Internal as ImageStyle } from 'react-native/Libraries/StyleSheet/StyleSheetTypes';\nimport type { ImageSourcePropType } from 'react-native/Libraries/Image/ImageSourcePropType';\nimport CacheManager, { type DownloadOptions } from './CacheManager';\n\ntype ImageProps = {\n  style?: ImageStyle,\n  defaultSource?: ImageSourcePropType,\n  preview?: ImageSourcePropType,\n  options?: DownloadOptions,\n  uri: string,\n  transitionDuration?: number,\n  tint?: 'dark' | 'light',\n};\n\ntype ImageState = {\n  uri: ?string,\n  intensity: Animated.Value,\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: 'dark',\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100),\n  };\n\n  async load({ uri, options = {} }: ImageProps): Promise<void> {\n    if (uri) {\n      const path = await CacheManager.get(uri, options).getPath();\n      if (this.mounted) {\n        this.setState({ uri: path });\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    const { preview, transitionDuration } = this.props;\n    const { uri, intensity } = this.state;\n    if (this.props.uri !== prevProps.uri) {\n      this.load(this.props);\n    } else if (uri && preview && !prevState.uri) {\n      Animated.timing(intensity, {\n        duration: transitionDuration,\n        toValue: 0,\n        useNativeDriver: Platform.OS === 'android',\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render(): React.Node {\n    const { preview, style, defaultSource, tint, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const hasDefaultSource = !!defaultSource;\n    const hasPreview = !!preview;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 0.5],\n    });\n    const computedStyle = [\n      StyleSheet.absoluteFill,\n      _.transform(\n        _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n        // $FlowFixMe\n        (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n      ),\n    ];\n\n    return (\n      <View {...{style}}>\n        {\n          (hasDefaultSource && !hasPreview && !isImageReady) &&\n          <RNImage\n             source={defaultSource}\n             style={computedStyle}\n             {...otherProps}\n          />\n        }\n        {\n          hasPreview &&\n          <RNImage\n             source={preview}\n             resizeMode=\"cover\"\n             style={computedStyle}\n             blurRadius={Platform.OS === 'android' ? 0.5 : 0}\n          />\n        }\n        {\n          isImageReady &&\n          <RNImage\n             source={{ uri }}\n             style={computedStyle}\n             {...otherProps}\n          />\n        }\n        {\n          (hasPreview && Platform.OS === 'ios') &&\n          <AnimatedBlurView style={computedStyle} {...{intensity, tint}} />\n        }\n        {\n          (hasPreview && Platform.OS === 'android') &&\n          <Animated.View\n            style={[computedStyle, { backgroundColor: tint === 'dark' ? black : white, opacity }]}\n          />\n        }\n      </View>\n    );\n  }\n}\n\nconst black = 'black';\nconst white = 'white';\nconst propsToCopy = [\n  'borderRadius',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}