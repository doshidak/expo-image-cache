{"version":3,"sources":["Image.tsx"],"names":["React","View","Image","RNImage","Animated","Platform","StyleSheet","_","CacheManager","propsToCopy","mounted","state","uri","undefined","intensity","Value","props","options","load","prevProps","prevUri","visible","transitionDuration","timing","duration","toValue","useNativeDriver","OS","start","setVisibility","get","getPath","path","setState","onLoadEnd","style","source","defaultSource","preview","onLoad","onLoadStart","otherProps","isImageReady","flattenedStyle","flatten","computedStyle","absoluteFill","transform","pickBy","_val","key","includes","result","value","borderWidth","opacity","interpolate","inputRange","outputRange","handleLoadEnd","Component","defaultProps"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport {\n  View,\n  Image as RNImage,\n  Animated,\n  Platform,\n  StyleSheet,\n  StyleProp,\n  ImageStyle,\n  ImageURISource,\n  ImageSourcePropType,\n} from 'react-native';\nimport * as _ from 'lodash';\nimport CacheManager, { DownloadOptions } from './CacheManager';\n\ninterface ImageProps {\n  style?: StyleProp<ImageStyle>;\n  transitionDuration?: number;\n  source?: ImageSourcePropType;\n  defaultSource?: ImageURISource | number;\n  preview?: ImageSourcePropType;\n  options?: DownloadOptions;\n  uri: string;\n  onLoad?(): void;\n  onLoadStart?(): void;\n  onLoadEnd?(): void;\n}\n\ninterface ImageState {\n  uri: string | undefined;\n  intensity: Animated.Value;\n}\n\nconst propsToCopy = [\n  'borderRadius',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n];\n\nclass Image extends React.Component<ImageProps, ImageState> {\n  static defaultProps = {\n    transitionDuration: 300,\n  };\n\n  mounted = true;\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(0),\n  };\n\n  componentDidMount() {\n    const { uri, options } = this.props;\n\n    this.load({ uri, options });\n  }\n\n  componentDidUpdate(prevProps: ImageProps) {\n    const { uri, options } = this.props;\n    const { uri: prevUri } = prevProps;\n\n    if (uri !== prevUri) this.load({ uri, options });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  setVisibility(visible: boolean) {\n    const { transitionDuration } = this.props;\n    const { intensity } = this.state;\n\n    Animated.timing(intensity, {\n      duration: transitionDuration,\n      toValue: visible ? 100 : 0,\n      useNativeDriver: Platform.OS === 'android',\n    }).start();\n  }\n\n  async load({ uri, options = {} }: ImageProps): Promise<void> {\n    if (!uri) return;\n\n    this.setVisibility(false);\n    const path = await CacheManager.get(uri, options).getPath();\n    if (this.mounted) this.setState({ uri: path });\n  }\n\n  handleLoadEnd() {\n    const { onLoadEnd } = this.props;\n\n    if (typeof onLoadEnd === 'function') onLoadEnd();\n    this.setVisibility(true);\n  }\n\n  render() {\n    const {\n      style,\n      source, // not used, only present to destructure from otherProps\n      defaultSource,\n      preview,\n      onLoad,\n      onLoadStart,\n      onLoadEnd, // not used in render(), but destructured from otherProps\n      ...otherProps\n    } = this.props;\n    const {\n      uri,\n      intensity,\n    } = this.state;\n\n    const isImageReady = !!uri;\n    const flattenedStyle = StyleSheet.flatten(style);\n    const computedStyle: StyleProp<ImageStyle> = [\n      StyleSheet.absoluteFill,\n      _.transform(\n        _.pickBy(flattenedStyle, (_val, key) => propsToCopy.includes(key)),\n        (result, value: any, key) => ({\n          ...(result as object),\n          [key]: value - (flattenedStyle.borderWidth || 0),\n        }),\n      ),\n    ];\n\n    return (\n      <View style={style}>\n        {\n          (!!defaultSource && !isImageReady) &&\n          <RNImage\n            style={computedStyle}\n            source={defaultSource}\n            {...otherProps}\n          />\n        }\n        {\n          !!preview &&\n          <RNImage\n            style={computedStyle}\n            source={preview}\n            blurRadius={0.5}\n            {...otherProps}\n          />\n        }\n        {\n          isImageReady &&\n          <Animated.Image\n            style={[computedStyle, {\n              opacity: intensity.interpolate({\n                inputRange: [0, 100],\n                outputRange: [0, 1],\n              }),\n            }]}\n            source={{ uri }}\n            fadeDuration={0} // Android only\n            onLoad={onLoad}\n            onLoadStart={onLoadStart}\n            onLoadEnd={() => this.handleLoadEnd()}\n            {...otherProps}\n          />\n        }\n      </View>\n    );\n  }\n}\n\nexport default Image;\n"]}