{"version":3,"sources":["Image.js"],"names":["_","React","Image","RNImage","Animated","StyleSheet","View","Platform","BlurView","CacheManager","mounted","state","uri","undefined","intensity","Value","options","get","getPath","path","setState","load","props","prevProps","prevState","transitionDuration","timing","duration","toValue","useNativeDriver","OS","start","preview","style","defaultSource","tint","useBlurView","otherProps","hasDefaultSource","hasPreview","isImageReady","opacity","interpolate","inputRange","outputRange","computedStyle","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","handleLoadEnd","backgroundColor","black","white","zIndex","Component","defaultProps","AnimatedBlurView","createAnimatedComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n} from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { type ____ImageStyleProp_Internal as ImageStyle } from 'react-native/Libraries/StyleSheet/StyleSheetTypes';\nimport type { ImageSourcePropType } from 'react-native/Libraries/Image/ImageSourcePropType';\nimport CacheManager, { type DownloadOptions } from './CacheManager';\n\ntype ImageProps = {\n  style?: ImageStyle,\n  defaultSource?: ImageSourcePropType,\n  preview?: ImageSourcePropType,\n  options?: DownloadOptions,\n  uri: string,\n  transitionDuration?: number,\n  tint?: 'dark' | 'light',\n};\n\ntype ImageState = {\n  uri: ?string,\n  intensity: Animated.Value,\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: 'light',\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100),\n  };\n\n  async load({ uri, options = {} }: ImageProps): Promise<void> {\n    if (uri) {\n      const path = await CacheManager.get(uri, options).getPath();\n      if (this.mounted) {\n        this.setState({ uri: path });\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    // const { preview, transitionDuration } = this.props;\n    // const { uri, intensity } = this.state;\n    if (this.props.uri !== prevProps.uri) {\n      this.load(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleLoadEnd() {\n    const { transitionDuration } = this.props;\n    const { intensity } = this.state;\n\n    Animated.timing(intensity, {\n      duration: transitionDuration,\n      toValue: 0,\n      useNativeDriver: Platform.OS === 'android',\n    }).start();\n  }\n\n  render(): React.Node {\n    const { preview, style, defaultSource, tint, useBlurView, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const hasDefaultSource = !!defaultSource;\n    const hasPreview = !!preview;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 1],\n    });\n    const computedStyle = [\n      StyleSheet.absoluteFill,\n      _.transform(\n        _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n        // $FlowFixMe\n        (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n      ),\n    ];\n\n    return (\n      <View {...{style}}>\n        {\n          (hasDefaultSource && !hasPreview && !isImageReady) &&\n          <RNImage\n             source={defaultSource}\n             style={computedStyle}\n             {...otherProps}\n          />\n        }\n        {\n          hasPreview &&\n          <RNImage\n             source={preview}\n             resizeMode=\"cover\"\n             style={computedStyle}\n             blurRadius={Platform.OS === 'android' ? 0.5 : 0}\n          />\n        }\n        {\n          isImageReady &&\n          <RNImage\n             source={{ uri }}\n             style={computedStyle}\n             onLoadEnd={() => this.handleLoadEnd()}\n             {...otherProps}\n          />\n        }\n        <Animated.View\n          style={[computedStyle, {\n            backgroundColor: tint === 'dark' ? black : white,\n            opacity,\n            zIndex: 1,\n          }]}\n        />\n        {/*\n          (Platform.OS === 'ios' && useBlurView) &&\n          <AnimatedBlurView style={computedStyle} {...{intensity, tint}} />\n        */}\n        {/*\n          (Platform.OS === 'android' || !useBlurView) &&\n          <Animated.View\n            style={[computedStyle, { backgroundColor: tint === 'dark' ? black : white, opacity }]}\n          />\n        */}\n      </View>\n    );\n  }\n}\n\nconst black = 'black';\nconst white = 'white';\nconst propsToCopy = [\n  'borderRadius',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}