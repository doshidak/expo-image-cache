{"version":3,"sources":["../../src/CacheManager.js"],"names":["_","FileSystem","BASE_DIR","cacheDirectory","CacheEntry","uri","options","getCacheEntry","path","exists","tmpPath","createDownloadResumable","downloadAsync","result","status","undefined","moveAsync","from","to","CacheManager","entries","deleteAsync","idempotent","makeDirectoryAsync","getInfoAsync","size","filename","substring","lastIndexOf","indexOf","length","ext","uniqueId"],"mappings":"ioBACA,8B,GAAYA,E,kCACZ,gD,GAAYC,W,0CACZ,mC,qfAOA,GAAMC,UAAcD,WAAWE,cAAzB,oBAAN,C,GAEaC,W,SAAAA,U,YAKX,oBAAYC,GAAZ,CAAyBC,OAAzB,CAAmD,kCACjD,KAAKD,GAAL,CAAWA,GAAX,CACA,KAAKC,OAAL,CAAeA,OAAf,CACD,C,iOAGSD,G,CAAiB,I,CAAjBA,G,CAAKC,O,CAAY,I,CAAZA,O,iDAC2BC,cAAcF,GAAd,C,4BAAhCG,I,MAAAA,I,CAAMC,M,MAAAA,M,CAAQC,O,MAAAA,O,KAClBD,M,yDACKD,I,0DAEYP,WAAWU,uBAAX,CAAmCN,GAAnC,CAAwCK,OAAxC,CAAiDJ,OAAjD,EAA0DM,aAA1D,E,UAAfC,M,oBAEFA,QAAUA,OAAOC,MAAP,GAAkB,G,2DACvBC,S,2DAEHd,WAAWe,SAAX,CAAqB,CAAEC,KAAMP,OAAR,CAAiBQ,GAAIV,IAArB,CAArB,C,0CACCA,I,wFAIUW,a,qJAGRd,G,CAAaC,O,CAAsC,CAC5D,GAAI,CAACa,aAAaC,OAAb,CAAqBf,GAArB,CAAL,CAAgC,CAC9Bc,aAAaC,OAAb,CAAqBf,GAArB,EAA4B,GAAID,WAAJ,CAAeC,GAAf,CAAoBC,OAApB,CAA5B,CACD,CACD,MAAOa,cAAaC,OAAb,CAAqBf,GAArB,CAAP,CACD,C,uNAGOJ,WAAWoB,WAAX,CAAuBnB,QAAvB,CAAiC,CAAEoB,WAAY,IAAd,CAAjC,C,0DACArB,WAAWsB,kBAAX,CAA8BrB,QAA9B,C,uSAIiBD,WAAWuB,YAAX,CAAwBtB,QAAxB,CAAkC,CAAEuB,KAAM,IAAR,CAAlC,C,8BAAfA,I,OAAAA,I,kCACDA,I,+FAhBFL,O,CAAyC,E,wBAD7BD,Y,CAqBrB,GAAMZ,eAAgB,QAAhBA,cAAgB,CAAOF,GAAP,sKACdqB,QADc,CACHrB,IAAIsB,SAAJ,CAActB,IAAIuB,WAAJ,CAAgB,GAAhB,CAAd,CAAoCvB,IAAIwB,OAAJ,CAAY,GAAZ,IAAqB,CAAC,CAAtB,CAA0BxB,IAAIyB,MAA9B,CAAuCzB,IAAIwB,OAAJ,CAAY,GAAZ,CAA3E,CADG,CAEdE,GAFc,CAERL,SAASG,OAAT,CAAiB,GAAjB,IAA0B,CAAC,CAA3B,CAA+B,MAA/B,CAAwCH,SAASC,SAAT,CAAmBD,SAASE,WAAT,CAAqB,GAArB,CAAnB,CAFhC,CAGdpB,IAHc,IAGJN,QAHI,CAGO,kBAAKG,GAAL,CAHP,CAGmB0B,GAHnB,CAIdrB,OAJc,IAIDR,QAJC,CAIU,kBAAKG,GAAL,CAJV,KAIuBL,EAAEgC,QAAF,EAJvB,CAIsCD,GAJtC,mEAOZ9B,WAAWsB,kBAAX,CAA8BrB,QAA9B,CAPY,sJAWKD,WAAWuB,YAAX,CAAwBhB,IAAxB,CAXL,+BAWZC,MAXY,OAWZA,MAXY,kCAYb,CAAEA,aAAF,CAAUD,SAAV,CAAgBE,eAAhB,CAZa,qEAAtB","file":"CacheManager.js","sourcesContent":["// @flow\nimport * as _ from 'lodash';\nimport * as FileSystem from 'expo-file-system';\nimport SHA1 from 'crypto-js/sha1';\n\nexport type DownloadOptions = {\n  md5?: boolean,\n  headers?: { [string]: string },\n};\n\nconst BASE_DIR = `${FileSystem.cacheDirectory}expo-image-cache/`;\n\nexport class CacheEntry {\n  uri: string;\n  options: DownloadOptions;\n  path: string;\n\n  constructor(uri: string, options: DownloadOptions) {\n    this.uri = uri;\n    this.options = options;\n  }\n\n  async getPath(): Promise<?string> {\n    const { uri, options } = this;\n    const { path, exists, tmpPath } = await getCacheEntry(uri);\n    if (exists) {\n      return path;\n    }\n    const result = await FileSystem.createDownloadResumable(uri, tmpPath, options).downloadAsync();\n    // If the image download failed, we don't cache anything\n    if (result && result.status !== 200) {\n      return undefined;\n    }\n    await FileSystem.moveAsync({ from: tmpPath, to: path });\n    return path;\n  }\n}\n\nexport default class CacheManager {\n  static entries: { [uri: string]: CacheEntry } = {};\n\n  static get(uri: string, options: DownloadOptions): CacheEntry {\n    if (!CacheManager.entries[uri]) {\n      CacheManager.entries[uri] = new CacheEntry(uri, options);\n    }\n    return CacheManager.entries[uri];\n  }\n\n  static async clearCache(): Promise<void> {\n    await FileSystem.deleteAsync(BASE_DIR, { idempotent: true });\n    await FileSystem.makeDirectoryAsync(BASE_DIR);\n  }\n\n  static async getCacheSize(): Promise<number> {\n    const { size } = await FileSystem.getInfoAsync(BASE_DIR, { size: true });\n    return size;\n  }\n}\n\nconst getCacheEntry = async (uri: string): Promise<{ exists: boolean, path: string, tmpPath: string }> => {\n  const filename = uri.substring(uri.lastIndexOf('/'), uri.indexOf('?') === -1 ? uri.length : uri.indexOf('?'));\n  const ext = filename.indexOf('.') === -1 ? '.jpg' : filename.substring(filename.lastIndexOf('.'));\n  const path = `${BASE_DIR}${SHA1(uri)}${ext}`;\n  const tmpPath = `${BASE_DIR}${SHA1(uri)}-${_.uniqueId()}${ext}`;\n  // TODO: maybe we don't have to do this every time\n  try {\n    await FileSystem.makeDirectoryAsync(BASE_DIR);\n  } catch (e) {\n    // do nothing\n  }\n  const { exists } = await FileSystem.getInfoAsync(path);\n  return { exists, path, tmpPath };\n};\n"]}