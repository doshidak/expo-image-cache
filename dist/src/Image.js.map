{"version":3,"sources":["../../src/Image.js"],"names":["_","React","Image","mounted","state","uri","undefined","intensity","Animated","Value","options","CacheManager","get","getPath","path","setState","load","props","prevProps","prevState","preview","transitionDuration","timing","duration","toValue","useNativeDriver","Platform","OS","start","style","defaultSource","tint","otherProps","hasDefaultSource","hasPreview","isImageReady","opacity","interpolate","inputRange","outputRange","computedStyle","StyleSheet","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","backgroundColor","black","white","Component","defaultProps","AnimatedBlurView","createAnimatedComponent","BlurView"],"mappings":"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","file":"Image.js","sourcesContent":["// @flow\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n} from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { type ____ImageStyleProp_Internal as ImageStyle } from 'react-native/Libraries/StyleSheet/StyleSheetTypes';\nimport type { ImageSourcePropType } from 'react-native/Libraries/Image/ImageSourcePropType';\nimport CacheManager, { type DownloadOptions } from './CacheManager';\n\ntype ImageProps = {\n  style?: ImageStyle,\n  defaultSource?: ImageSourcePropType,\n  preview?: ImageSourcePropType,\n  options?: DownloadOptions,\n  uri: string,\n  transitionDuration?: number,\n  tint?: 'dark' | 'light',\n};\n\ntype ImageState = {\n  uri: ?string,\n  intensity: Animated.Value,\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: 'dark',\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100),\n  };\n\n  async load({ uri, options = {} }: ImageProps): Promise<void> {\n    if (uri) {\n      const path = await CacheManager.get(uri, options).getPath();\n      if (this.mounted) {\n        this.setState({ uri: path });\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    const { preview, transitionDuration } = this.props;\n    const { uri, intensity } = this.state;\n    if (this.props.uri !== prevProps.uri) {\n      this.load(this.props);\n    } else if (uri && preview && !prevState.uri) {\n      Animated.timing(intensity, {\n        duration: transitionDuration,\n        toValue: 0,\n        useNativeDriver: Platform.OS === 'android',\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render(): React.Node {\n    const { preview, style, defaultSource, tint, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const hasDefaultSource = !!defaultSource;\n    const hasPreview = !!preview;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 0.5],\n    });\n    const computedStyle = [\n      StyleSheet.absoluteFill,\n      _.transform(\n        _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n        // $FlowFixMe\n        (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n      ),\n    ];\n\n    return (\n      <View {...{style}}>\n        {\n          (hasDefaultSource && !hasPreview && !isImageReady) &&\n          <RNImage\n             source={defaultSource}\n             style={computedStyle}\n             {...otherProps}\n          />\n        }\n        {\n          hasPreview &&\n          <RNImage\n             source={preview}\n             resizeMode=\"cover\"\n             style={computedStyle}\n             blurRadius={Platform.OS === 'android' ? 0.5 : 0}\n          />\n        }\n        {\n          isImageReady &&\n          <RNImage\n             source={{ uri }}\n             style={computedStyle}\n             {...otherProps}\n          />\n        }\n        {\n          (hasPreview && Platform.OS === 'ios') &&\n          <AnimatedBlurView style={computedStyle} {...{intensity, tint}} />\n        }\n        {\n          (hasPreview && Platform.OS === 'android') &&\n          <Animated.View\n            style={[computedStyle, { backgroundColor: tint === 'dark' ? black : white, opacity }]}\n          />\n        }\n      </View>\n    );\n  }\n}\n\nconst black = 'black';\nconst white = 'white';\nconst propsToCopy = [\n  'borderRadius',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}